// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	amqp091 "github.com/rabbitmq/amqp091-go"
	mock "github.com/stretchr/testify/mock"
)

// Selector is an autogenerated mock type for the Selector type
type Selector struct {
	mock.Mock
}

// IsSelected provides a mock function with given fields: msg
func (_m *Selector) IsSelected(msg amqp091.Delivery) (bool, error) {
	ret := _m.Called(msg)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(amqp091.Delivery) (bool, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(amqp091.Delivery) bool); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(amqp091.Delivery) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSelector creates a new instance of Selector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Selector {
	mock := &Selector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
